



Network Working Group                                              S. Li
Internet-Draft                                                       EFF
Intended status: Experimental                                     C. Man
Expires: December 26, 2018                                     J. Watson
                                                     Stanford University
                                                           June 24, 2018


                     Delegated Distributed Mappings
                       draft-watson-dinrg-ddm-00

Abstract

   TODO Come back and finish this after the rest of the document is
   written.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 26, 2018.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.




Li, et al.              Expires December 26, 2018               [Page 1]

Internet-Draft                     DDM                         June 2018


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Structure . . . . . . . . . . . . . . . . . . . . . . . . . .   2
     2.1.  Cells . . . . . . . . . . . . . . . . . . . . . . . . . .   2
     2.2.  Tables  . . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.3.  Root Key Listing  . . . . . . . . . . . . . . . . . . . .   4
     2.4.  Delegation  . . . . . . . . . . . . . . . . . . . . . . .   4
     2.5.  Merkle Tree . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  Consensus . . . . . . . . . . . . . . . . . . . . . . . . . .   5
     3.1.  Protocol  . . . . . . . . . . . . . . . . . . . . . . . .   5
     3.2.  Enforced Transitions  . . . . . . . . . . . . . . . . . .   5
   4.  Representative Use Cases  . . . . . . . . . . . . . . . . . .   5
     4.1.  DNS Delegation  . . . . . . . . . . . . . . . . . . . . .   5
     4.2.  IP Address Delegation . . . . . . . . . . . . . . . . . .   5
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   5
   6.  Normative References  . . . . . . . . . . . . . . . . . . . .   5
   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .   5
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   5

1.  Introduction

   *** copy stuff from our previous presentations and stuffz ***

2.  Structure

   TODO explain how owners/delegators/authorities are identified by
   their public key each authority can make delegations in their
   _table_, recorded in individual _cells_.

   explain use of signature briefly

   typedef publickey opaque[32];

   struct signature {
       publickey pk;
       opaque data[32];
   };

2.1.  Cells











Li, et al.              Expires December 26, 2018               [Page 2]

Internet-Draft                     DDM                         June 2018


   /* */
   struct valuecell {
       opaque value<>;           /* */
       publickey owner_key;      /* */
       signature transition_sig; /* */
   };

   /* */
   struct delegatecell {
       opaque namespace<>;       /* */
       publickey *delegee;       /* */
       signature authority_sig;  /* */
   };

   enum celltype {
       VALUE = 0,
       DELEGATE = 1
   };

   /* */
   union cell switch (celltype type) {
   case VALUE:
       valuecell vcell;
   case DELEGATE:
       delegatecell dcell;
   };

2.2.  Tables

   /* */
   enum tabletype {
       PREFIX = 0,
       SUFFIX = 1,
       FLAT = 2
   };

   /* */
   struct tableentry {
       opaque lookup_key<>; /* */
       cell cells<>;        /* */
   }

   /* */
   struct table {
       tabletype type;        /* */
       tableentry entries<>; /* */
   };




Li, et al.              Expires December 26, 2018               [Page 3]

Internet-Draft                     DDM                         June 2018


2.3.  Root Key Listing

   /* */
   struct tableentry {
       publickey authority; /* */
       table *delegations;  /* */
   }

   /* */
   struct tables {
       tableentry entries<>; /* */
   }

   Adding to the root listing is by ???. No one knows yet.

2.4.  Delegation

   rules are based on the type of the table, discussed later (below).
   delegating the whole or part of a namespace requires adding a new
   lookup key for the namespace and a matching delegate cell.  The dcell
   should be created with the same namespace value, the publickey of the
   _delegee_, who will control a table for futher sub-delegating the
   namespace.  Finally, the dcell is signed by the table authority
   publickey to authorize the addition.

2.5.  Merkle Tree

   We can use the Trillian implementation _if_ we can uniquely identify
   tables by name -> root key + path of keys down to the delegation.
   Thus, to get to a table, you have to perform a log-time lookup
   procedure during which it is impossible to reach an entry not on the
   proper chain (hashes of a key chain should be hard to guess).  Also
   helps us validate delegation during consensus (discussed later) Thus,
   the virtual structure (tree of tables) is different from the actual
   structure (leaf-only Merkle tree).

   On delegation, the change should contain (1) proof (i.e. hash path to
   root for updated table), (2) the updated table delta, (3) the new
   table (empty) to add to the tree with the right key.

   Then: * explain how to hash up the tree / get an existence proof *
   what do we need to perform consensus? an added/updated cell and the
   hash path to the root








Li, et al.              Expires December 26, 2018               [Page 4]

Internet-Draft                     DDM                         June 2018


3.  Consensus

   TODO

3.1.  Protocol

3.2.  Enforced Transitions

4.  Representative Use Cases

   TODO

4.1.  DNS Delegation

4.2.  IP Address Delegation

5.  Security Considerations

   TODO

6.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

Acknowledgments

   TODO

Authors' Addresses

   Sydney Li
   Electronic Frontier Foundation
   <TODO fill this in>
   <TODO fill this in>
   US

   Email: sydney@eff.org











Li, et al.              Expires December 26, 2018               [Page 5]

Internet-Draft                     DDM                         June 2018


   Colin Man
   Stanford University
   <TODO fill this in>
   <TODO fill this in>
   US

   Email: colinman@stanford.edu


   Jean-Luc Watson
   Stanford University
   353 Serra Mall
   Stanford, CA
   US

   Email: jlwatson@cs.stanford.edu



































Li, et al.              Expires December 26, 2018               [Page 6]
